import sys
import re
import pandas as pd
import cantools

from typing import List, Dict

message_format = re.compile("\(([0-9]*.[0-9]*)\) can0 ([0-9]{3})#([0-9A-F]*)")


def candump_to_series(dbcfile_path: str, logfile_path: str):
	"""
	Create a dictionary of signal names to a pd.Series of time valued signals
	from the given candump logfile.

	dbcfile_path: Path to DBC file to parse from
	logfile_path: Path to a logfile generated by candump
	return: Dictionary of pd.Series where each key is a signal name from the DBC file
	"""
	# 
	# 1. Convert candump file to pandas DataFrame
	#
	with open(logfile_path, "r") as logfile:
		data = message_format.findall(logfile.read())
		
	df = pd.DataFrame(data=data, columns=['timestamp', 'id', 'data'])
	df['id'] = df['id'].apply(lambda x: int(x, 16))

	# 
	# 2. Parse data from DBC file
	#
	
	dbc = cantools.database.load_file(dbcfile_path)
	# Only process the valid ids in the DBC file
	all_ids: List[int] 
	all_ids = [message.frame_id for message in dbc.messages]

	# Will hold all dataframes for each signal instance.
	# It is much faster to create a list of dataframes and later merge them by name
	all_dfs: Dict[str, List[pd.DataFrame]]
	all_dfs = {message.name: [] for message in dbc.messages}

	for timestamp, m_id, data in df.to_numpy():
		if m_id in all_ids:
			dbc_message = dbc.get_message_by_frame_id(m_id)
			try:
				decoded = dbc.decode_message(frame_id_or_name=m_id, data=bytes.fromhex(data), scaling=False)
				all_dfs[dbc_message.name].append(pd.DataFrame(decoded, index=[timestamp]))
			except:
				# Some messages have length mis-matches in the DBC, let the user know that this ID is messed up
				print(f"Error parsing message with ID {hex(m_id)} from DBC file.")

	# 
	# 3. Split DataFrames into invididual Series per signal
	#

	# Merge all individual dataframes from each message instance
	message_dfs: Dict[str, pd.DataFrame]
	message_dfs = {name: pd.concat(all_dfs[name]) for name in all_dfs.keys() if all_dfs[name]}

	# Split each dataframe into individual signals, list of series
	all_signals: Dict[str, pd.Series]
	all_signals = {name: message_dfs[message][name] for message in message_dfs.keys() for name in message_dfs[message].columns}

	return all_signals


if __name__ == "__main__":

	if len(sys.argv == 3):
		dbcfile_path = sys.argv[1]
		logfile_path = sys.argv[2]

		all_signals = candump_to_series(dbc_filepath, logfile_path)
		candump_time = re.match(".*candump-(.*)\.log", logfile_path).group(1)
		pd.DataFrame(all_signals).to_csv(f"parsed-{candump_time}.csv")
	else
		print("Invlalid usage. Please provide a DBC file path and candump filepath")