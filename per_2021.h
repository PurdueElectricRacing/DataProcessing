/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 34.1.0 Tue Jun  9 19:59:44 2020.
 */

#ifndef PER_2021_H
#define PER_2021_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define PER_2021_MAIN_HEARTBEAT_FRAME_ID (0x05u)
#define PER_2021_MAIN_STATE_CHANGE_FRAME_ID (0x04u)
#define PER_2021_PDL_HEARTBEAT_FRAME_ID (0x03u)
#define PER_2021_DSH_HEARTBEAT_FRAME_ID (0x02u)
#define PER_2021_DSH_BUTTONS_FRAME_ID (0x01u)
#define PER_2021_PDL_THROTTLE_FRAME_ID (0x00u)

/* Frame lengths in bytes. */
#define PER_2021_MAIN_HEARTBEAT_LENGTH (8u)
#define PER_2021_MAIN_STATE_CHANGE_LENGTH (8u)
#define PER_2021_PDL_HEARTBEAT_LENGTH (1u)
#define PER_2021_DSH_HEARTBEAT_LENGTH (1u)
#define PER_2021_DSH_BUTTONS_LENGTH (1u)
#define PER_2021_PDL_THROTTLE_LENGTH (7u)

/* Extended or standard frame types. */
#define PER_2021_MAIN_HEARTBEAT_IS_EXTENDED (0)
#define PER_2021_MAIN_STATE_CHANGE_IS_EXTENDED (0)
#define PER_2021_PDL_HEARTBEAT_IS_EXTENDED (0)
#define PER_2021_DSH_HEARTBEAT_IS_EXTENDED (0)
#define PER_2021_DSH_BUTTONS_IS_EXTENDED (0)
#define PER_2021_PDL_THROTTLE_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define PER_2021_MAIN_STATE_CHANGE_MAIN_CAR_STATE_INIT_CHOICE (0u)
#define PER_2021_MAIN_STATE_CHANGE_MAIN_CAR_STATE_PRE_READY_TO_DRIVE_CHOICE (1u)
#define PER_2021_MAIN_STATE_CHANGE_MAIN_CAR_STATE_READY_TO_DRIVE_CHOICE (2u)
#define PER_2021_MAIN_STATE_CHANGE_MAIN_CAR_STATE_ERROR_CHOICE (3u)
#define PER_2021_MAIN_STATE_CHANGE_MAIN_CAR_STATE_RESET_CHOICE (4u)
#define PER_2021_MAIN_STATE_CHANGE_MAIN_CAR_STATE_RECOVER_CHOICE (5u)

#define PER_2021_DSH_BUTTONS_DSH_TRACTION_MODE_TRACTION__CONTROL__DISABLE_CHOICE (0u)
#define PER_2021_DSH_BUTTONS_DSH_TRACTION_MODE_TRACTON__CONTROL__ENABLE_CHOICE (1u)
#define PER_2021_DSH_BUTTONS_DSH_TRACTION_MODE_LAUNCH__CONTROL_CHOICE (2u)

/**
 * Signals in message MAIN_Heartbeat.
 *
 * All signal values are as on the CAN bus.
 */
struct per_2021_main_heartbeat_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t main_heartbeat;
};

/**
 * Signals in message MAIN_StateChange.
 *
 * All signal values are as on the CAN bus.
 */
struct per_2021_main_state_change_t {
    /**
     * Range: 0..7 (0..7 State)
     * Scale: 1
     * Offset: 0
     */
    uint8_t main_car_state;
};

/**
 * Signals in message PDL_Heartbeat.
 *
 * All signal values are as on the CAN bus.
 */
struct per_2021_pdl_heartbeat_t {
    /**
     * Range: 0..1 (0..1 Life)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdl_heartbeat;
};

/**
 * Signals in message DSH_Heartbeat.
 *
 * Periodic Heartbeat for Dashboard
 *
 * All signal values are as on the CAN bus.
 */
struct per_2021_dsh_heartbeat_t {
    /**
     * Range: 0..1 (0..1 Life)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsh_heartbeat;
};

/**
 * Signals in message DSH_Buttons.
 *
 * All signal values are as on the CAN bus.
 */
struct per_2021_dsh_buttons_t {
    /**
     * Put car into ready to drive mode
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t dsh_start_button;

    /**
     * Set traction control mode
     *
     * Range: 0..3 (0..3 State)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsh_traction_mode;
};

/**
 * Signals in message PDL_Throttle.
 *
 * All signal values are as on the CAN bus.
 */
struct per_2021_pdl_throttle_t {
    /**
     * Throttle position
     *
     * Range: 0..4095 (0..4095 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdl_throttle_position_a;

    /**
     * Throttle position B
     *
     * Range: 0..4095 (0..4095 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdl_throttle_position_b;

    /**
     * Break position of preassure transducer A
     *
     * Range: 0..4095 (0..4095 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdl_break_position_a;

    /**
     * Break position of preassure transducer B
     *
     * Range: 0..4095 (0..4095 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdl_break_position_b;
};

/**
 * Pack message MAIN_Heartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int per_2021_main_heartbeat_pack(
    uint8_t *dst_p,
    const struct per_2021_main_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message MAIN_Heartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int per_2021_main_heartbeat_unpack(
    struct per_2021_main_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_main_heartbeat_main_heartbeat_is_in_range(uint8_t value);

/**
 * Pack message MAIN_StateChange.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int per_2021_main_state_change_pack(
    uint8_t *dst_p,
    const struct per_2021_main_state_change_t *src_p,
    size_t size);

/**
 * Unpack message MAIN_StateChange.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int per_2021_main_state_change_unpack(
    struct per_2021_main_state_change_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_main_state_change_main_car_state_is_in_range(uint8_t value);

/**
 * Pack message PDL_Heartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int per_2021_pdl_heartbeat_pack(
    uint8_t *dst_p,
    const struct per_2021_pdl_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message PDL_Heartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int per_2021_pdl_heartbeat_unpack(
    struct per_2021_pdl_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_pdl_heartbeat_pdl_heartbeat_is_in_range(uint8_t value);

/**
 * Pack message DSH_Heartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int per_2021_dsh_heartbeat_pack(
    uint8_t *dst_p,
    const struct per_2021_dsh_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message DSH_Heartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int per_2021_dsh_heartbeat_unpack(
    struct per_2021_dsh_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_dsh_heartbeat_dsh_heartbeat_is_in_range(uint8_t value);

/**
 * Pack message DSH_Buttons.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int per_2021_dsh_buttons_pack(
    uint8_t *dst_p,
    const struct per_2021_dsh_buttons_t *src_p,
    size_t size);

/**
 * Unpack message DSH_Buttons.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int per_2021_dsh_buttons_unpack(
    struct per_2021_dsh_buttons_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_dsh_buttons_dsh_start_button_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_dsh_buttons_dsh_traction_mode_is_in_range(uint8_t value);

/**
 * Pack message PDL_Throttle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int per_2021_pdl_throttle_pack(
    uint8_t *dst_p,
    const struct per_2021_pdl_throttle_t *src_p,
    size_t size);

/**
 * Unpack message PDL_Throttle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int per_2021_pdl_throttle_unpack(
    struct per_2021_pdl_throttle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_pdl_throttle_pdl_throttle_position_a_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_pdl_throttle_pdl_throttle_position_b_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_pdl_throttle_pdl_break_position_a_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool per_2021_pdl_throttle_pdl_break_position_b_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
